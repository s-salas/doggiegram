{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { selectSearchTerm } from '../search/search.slice';\nimport photos from './photos.data.js';\nconst initialState = {\n  photos\n};\nconst options = {\n  name: 'photos',\n  initialState,\n  reducers: {\n    // Task 1: Create an `addPhoto()` case reducer that adds a photo to state.photos. \n    // Task 1 Hint: You can use state.photos.unshift()\n    // `unshift()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n    addPhoto: (state, action) => {\n      state.photos.unshift({\n        id: new Date().getTime(),\n        caption: action.payload\n      });\n    },\n    // Task 6: Create an `removePhoto()` case reducer that removes a photo from state.photos\n    // Task 6 Hint: You can use state.photos.splice()\n    // `splice()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    removePhoto: (state, action) => {\n      const index = state.photos.findIndex(photo => photo.id === action.payload);\n\n      if (index !== -1) {\n        state.photos.splice(index, 1);\n      }\n    }\n  }\n};\nconst photosSlice = createSlice(options);\nexport const {\n  addPhoto,\n  removePhoto\n} = photosSlice.actions;\nexport default photosSlice.reducer;\nexport const selectAllPhotos = state => state.photos.photos;\nexport const selectFilteredPhotos = state => {\n  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term\n  const photos = state.photos.photos;\n  const searchTerm = selectSearchTerm(state);\n  return photos.filter(photo => {\n    const caption = photo.caption || '';\n    return caption.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n};","map":{"version":3,"names":["createSlice","selectSearchTerm","photos","initialState","options","name","reducers","addPhoto","state","action","unshift","id","Date","getTime","caption","payload","removePhoto","index","findIndex","photo","splice","photosSlice","actions","reducer","selectAllPhotos","selectFilteredPhotos","searchTerm","filter","toLowerCase","includes"],"sources":["/Users/shelbysalas/Documents/chegg-skills/react-projects/redux-assessment/src/features/photos/photos.slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { selectSearchTerm } from '../search/search.slice';\nimport photos from './photos.data.js';\n\nconst initialState = {\n  photos,\n};\n\nconst options = {\n  name: 'photos',\n  initialState,\n  reducers: {\n    // Task 1: Create an `addPhoto()` case reducer that adds a photo to state.photos. \n    // Task 1 Hint: You can use state.photos.unshift()\n    // `unshift()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n    addPhoto: (state, action) => {\n      state.photos.unshift({ id: new Date().getTime(), caption: action.payload });\n    },\n   \n    // Task 6: Create an `removePhoto()` case reducer that removes a photo from state.photos\n    // Task 6 Hint: You can use state.photos.splice()\n    // `splice()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    removePhoto: (state, action) => {\n      const index = state.photos.findIndex(photo => photo.id === action.payload);\n      if (index !== -1) {\n        state.photos.splice(index, 1);\n      }\n    }\n  },\n};\n\nconst photosSlice = createSlice(options);\n\nexport const { addPhoto, removePhoto } = photosSlice.actions;\n\nexport default photosSlice.reducer;\n\nexport const selectAllPhotos = (state) => state.photos.photos;\nexport const selectFilteredPhotos = (state) => {\n  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term\n  const photos = state.photos.photos;\n  const searchTerm = selectSearchTerm(state);\n  return photos.filter(photo => {\n    const caption = photo.caption || '';\n    return caption.toLowerCase().includes(searchTerm.toLowerCase())\n});\n};\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,YAAY,GAAG;EACnBD;AADmB,CAArB;AAIA,MAAME,OAAO,GAAG;EACdC,IAAI,EAAE,QADQ;EAEdF,YAFc;EAGdG,QAAQ,EAAE;IACR;IACA;IACA;IACAC,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAACN,MAAN,CAAaQ,OAAb,CAAqB;QAAEC,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAAN;QAA4BC,OAAO,EAAEL,MAAM,CAACM;MAA5C,CAArB;IACD,CANO;IAQR;IACA;IACA;IACAC,WAAW,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAMQ,KAAK,GAAGT,KAAK,CAACN,MAAN,CAAagB,SAAb,CAAuBC,KAAK,IAAIA,KAAK,CAACR,EAAN,KAAaF,MAAM,CAACM,OAApD,CAAd;;MACA,IAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;QAChBT,KAAK,CAACN,MAAN,CAAakB,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;MACD;IACF;EAhBO;AAHI,CAAhB;AAuBA,MAAMI,WAAW,GAAGrB,WAAW,CAACI,OAAD,CAA/B;AAEA,OAAO,MAAM;EAAEG,QAAF;EAAYS;AAAZ,IAA4BK,WAAW,CAACC,OAA9C;AAEP,eAAeD,WAAW,CAACE,OAA3B;AAEA,OAAO,MAAMC,eAAe,GAAIhB,KAAD,IAAWA,KAAK,CAACN,MAAN,CAAaA,MAAhD;AACP,OAAO,MAAMuB,oBAAoB,GAAIjB,KAAD,IAAW;EAC7C;EACA,MAAMN,MAAM,GAAGM,KAAK,CAACN,MAAN,CAAaA,MAA5B;EACA,MAAMwB,UAAU,GAAGzB,gBAAgB,CAACO,KAAD,CAAnC;EACA,OAAON,MAAM,CAACyB,MAAP,CAAcR,KAAK,IAAI;IAC5B,MAAML,OAAO,GAAGK,KAAK,CAACL,OAAN,IAAiB,EAAjC;IACA,OAAOA,OAAO,CAACc,WAAR,GAAsBC,QAAtB,CAA+BH,UAAU,CAACE,WAAX,EAA/B,CAAP;EACH,CAHQ,CAAP;AAID,CARM"},"metadata":{},"sourceType":"module"}