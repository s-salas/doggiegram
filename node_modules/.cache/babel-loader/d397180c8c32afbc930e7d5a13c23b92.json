{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const fetchSuggestion = createAsyncThunk(\n/* Task 15: Complete the `createAsyncThunk()` function to load a suggestion from this URL: http://localhost:3004/api/suggestion */\nasync (_, thunkAPI) => {\n  try {\n    const response = await fetch(`http://localhost:3004/api/suggestion`);\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nconst initialState = {\n  suggestion: null,\n  loading: false,\n  error: true\n};\nconst options = {\n  name: 'suggestion',\n  initialState: {\n    suggestion: null,\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    /* Task 16: Inside `extraReducers`, add reducers to handle all three promise lifecycle states - pending, fulfilled, and rejected - for the `fetchSuggestion()` call */\n    builder.addCase(fetchSuggestion.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchSuggestion.fulfilled, (state, action) => {\n      state.loading = false;\n      state.suggestion = action.payload;\n      state.error = null;\n    }).addCase(fetchSuggestion.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload ? action.payload.error : 'Unknown error';\n    });\n  }\n};\nconst suggestionSlice = createSlice(options);\nexport default suggestionSlice.reducer; // Task 17: Create a selector, called `selectSuggestion`, for the `suggestion` state variable and export it from the file\n\nexport const selectSuggestion = state => state.suggestion.suggestion;\nexport const selectLoading = state => state.suggestion.loading;\nexport const selectError = state => state.suggestion.error;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchSuggestion","_","thunkAPI","response","fetch","ok","Error","data","json","error","rejectWithValue","message","initialState","suggestion","loading","options","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","suggestionSlice","reducer","selectSuggestion","selectLoading","selectError"],"sources":["/Users/shelbysalas/Documents/chegg-skills/react-projects/redux-assessment/src/features/suggestion/suggestion.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const fetchSuggestion =\n  createAsyncThunk(/* Task 15: Complete the `createAsyncThunk()` function to load a suggestion from this URL: http://localhost:3004/api/suggestion */\n    async (_, thunkAPI) => {\n      try {\n        const response = await fetch(`http://localhost:3004/api/suggestion`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n    }\n  );\n\nconst initialState = {\n  suggestion: null,\n  loading: false,\n  error: true,\n}\n\nconst options = {\n  name: 'suggestion',\n  initialState: {\n    suggestion: null,\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    /* Task 16: Inside `extraReducers`, add reducers to handle all three promise lifecycle states - pending, fulfilled, and rejected - for the `fetchSuggestion()` call */\n    builder\n    .addCase(fetchSuggestion.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    })\n    .addCase(fetchSuggestion.fulfilled, (state, action) => {\n      state.loading = false;\n      state.suggestion = action.payload;\n      state.error = null;\n    })\n    .addCase(fetchSuggestion.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload ? action.payload.error : 'Unknown error';\n    });\n  },\n};\n\nconst suggestionSlice = createSlice(options);\n\nexport default suggestionSlice.reducer;\n\n// Task 17: Create a selector, called `selectSuggestion`, for the `suggestion` state variable and export it from the file\nexport const selectSuggestion = (state) => state.suggestion.suggestion;\nexport const selectLoading = (state) => state.suggestion.loading;\nexport const selectError = (state) => state.suggestion.error;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,eAAe,GAC1BF,gBAAgB;AAAC;AACf,OAAOG,CAAP,EAAUC,QAAV,KAAuB;EACrB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAF,CAA5B;;IACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;MAChB,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;IACD;;IACH,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;IACA,OAAOD,IAAP;EACD,CAPC,CAOA,OAAOE,KAAP,EAAc;IACd,OAAOP,QAAQ,CAACQ,eAAT,CAAyB;MAAED,KAAK,EAAEA,KAAK,CAACE;IAAf,CAAzB,CAAP;EACD;AACA,CAZa,CADX;AAgBP,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,IADO;EAEnBC,OAAO,EAAE,KAFU;EAGnBL,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMM,OAAO,GAAG;EACdC,IAAI,EAAE,YADQ;EAEdJ,YAAY,EAAE;IACZC,UAAU,EAAE,IADA;IAEZC,OAAO,EAAE,KAFG;IAGZL,KAAK,EAAE;EAHK,CAFA;EAOdQ,QAAQ,EAAE,EAPI;EAQdC,aAAa,EAAGC,OAAD,IAAa;IAC1B;IACAA,OAAO,CACNC,OADD,CACSpB,eAAe,CAACqB,OADzB,EACmCC,KAAD,IAAW;MAC3CA,KAAK,CAACR,OAAN,GAAgB,IAAhB;MACAQ,KAAK,CAACb,KAAN,GAAc,IAAd;IACD,CAJD,EAKCW,OALD,CAKSpB,eAAe,CAACuB,SALzB,EAKoC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACrDF,KAAK,CAACR,OAAN,GAAgB,KAAhB;MACAQ,KAAK,CAACT,UAAN,GAAmBW,MAAM,CAACC,OAA1B;MACAH,KAAK,CAACb,KAAN,GAAc,IAAd;IACD,CATD,EAUCW,OAVD,CAUSpB,eAAe,CAAC0B,QAVzB,EAUmC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MACpDF,KAAK,CAACR,OAAN,GAAgB,KAAhB;MACAQ,KAAK,CAACb,KAAN,GAAce,MAAM,CAACC,OAAP,GAAiBD,MAAM,CAACC,OAAP,CAAehB,KAAhC,GAAwC,eAAtD;IACD,CAbD;EAcD;AAxBa,CAAhB;AA2BA,MAAMkB,eAAe,GAAG5B,WAAW,CAACgB,OAAD,CAAnC;AAEA,eAAeY,eAAe,CAACC,OAA/B,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAIP,KAAD,IAAWA,KAAK,CAACT,UAAN,CAAiBA,UAArD;AACP,OAAO,MAAMiB,aAAa,GAAIR,KAAD,IAAWA,KAAK,CAACT,UAAN,CAAiBC,OAAlD;AACP,OAAO,MAAMiB,WAAW,GAAIT,KAAD,IAAWA,KAAK,CAACT,UAAN,CAAiBJ,KAAhD"},"metadata":{},"sourceType":"module"}